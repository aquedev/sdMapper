// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.5.0.0
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace sdMapper.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ConvertingThinItemFeature : Xunit.IUseFixture<ConvertingThinItemFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ItemConverter.feature"
#line hidden
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Converting Thin item", "In order to convert an item to an object based on a Map\nI want all the mapped pro" +
                    "perties to be populated from the item\'s fields", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public virtual void SetFixture(ConvertingThinItemFeature.FixtureData fixtureData)
        {
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Title",
                        "Body",
                        "NumberOfViews"});
            table1.AddRow(new string[] {
                        "Item1",
                        "Blue whale",
                        "A book about the whales in the pacific",
                        "500"});
            table1.AddRow(new string[] {
                        "Item2",
                        "The dark forest",
                        "A book about the woods",
                        "100"});
#line 7
 testRunner.Given("the following items", ((string)(null)), table1);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Field"});
            table2.AddRow(new string[] {
                        "Title",
                        "Title"});
            table2.AddRow(new string[] {
                        "Body",
                        "Body"});
            table2.AddRow(new string[] {
                        "Views",
                        "NumberOfViews"});
#line 11
 testRunner.Given("the following map", ((string)(null)), table2);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Prorerty",
                        "Field"});
            table3.AddRow(new string[] {
                        "Name",
                        "Name"});
#line 16
 testRunner.Given("the following conventions", ((string)(null)), table3);
#line hidden
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Converting Thin item")]
        [Xunit.TraitAttribute("Description", "Automatically setting name property if it exists")]
        public virtual void AutomaticallySettingNamePropertyIfItExists()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Automatically setting name property if it exists", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
 testRunner.Given("I have item with name Item1");
#line 22
 testRunner.When("I Convert the item");
#line 23
 testRunner.Then("the resulting book entity\'s Title property is set to \"Blue whale\"");
#line 24
 testRunner.And("Body set to \"A book about the whales in the pacific\"");
#line 25
 testRunner.And("View set to \"500\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Converting Thin item")]
        [Xunit.TraitAttribute("Description", "Setting string propreties")]
        public virtual void SettingStringPropreties()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Setting string propreties", ((string[])(null)));
#line 27
this.ScenarioSetup(scenarioInfo);
#line 28
    testRunner.Given("I have item with name Item1");
#line 29
 testRunner.When("I Convert the item");
#line 30
 testRunner.Then("the resulting book entity\'s Title proprety is \"Blue whale\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.5.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ConvertingThinItemFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ConvertingThinItemFeature.FeatureTearDown();
            }
        }
    }
}
#endregion
